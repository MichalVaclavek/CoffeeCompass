package cz.fungisoft.coffeecompass.controller;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Locale;
import java.util.Optional;

import org.springframework.context.MessageSource;
import org.springframework.context.NoSuchMessageException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import cz.fungisoft.coffeecompass.entity.User;
import cz.fungisoft.coffeecompass.exceptions.BadAuthorizationRequestException;
import cz.fungisoft.coffeecompass.security.JwtTokenProviderService;
import cz.fungisoft.coffeecompass.service.UserService;
import lombok.extern.log4j.Log4j2;

/**
 * 
 * Handle success and error OAuth2 authentication endpoints.<br>
 * Success endpoint is protected by token generated by OAuth2AuthenticationSuccessHandler.<br>
 * <br>
 * Main function is to redirect to 'standard' pages/endpoints after successful or failed oAuth2<br>
 * authentication according gived criteria (first or other authentication attempt and so on)
 * 
 * @author Michal Vaclavek
 *
 */
@RequestMapping("/oauth2")
@Controller
@Log4j2
public class OAuth2LoginRegisterController
{
    private UserService userService;

    private MessageSource messages;
    
    private JwtTokenProviderService tokenProvider;
    

    public OAuth2LoginRegisterController(UserService userService,
                                         MessageSource messages,
                                         JwtTokenProviderService tokenProvider) {
        super();
        this.userService = userService;
        this.messages = messages;
        this.tokenProvider = tokenProvider;
    }

    /**
     * Handle redirection URL after successful OAuth2 login.
     * <p>
     * Either show registration form to allow a new user to finish registration<br>
     * (to modify user data and entering password) or home page, if the user is<br>
     * already registered.
     * <p>
     * The endpoint URL is protected by token generated during finish of OAuth2<br>
     * in OAuth2AuthenticationSuccessHandler class.
     * 
     * @param model
     * @return
     */
    @GetMapping("/loginSuccess")
    public String serveOAuth2LoginSuccess(@RequestParam(value="token", defaultValue="") String token, Model model) {
        
        if (!token.isEmpty() && tokenProvider.validateToken(token)) {
            Optional<User> loggedInUser = userService.getCurrentLoggedInUser();
            
            if (loggedInUser.isPresent()) { // after successful 'social' login attemt, the user should be logged-in automaticaly. 
                User user = loggedInUser.get(); 
                String encodedUserName = loggedInUser.get().getUserName();
                try {
                    encodedUserName = URLEncoder.encode(user.getUserName(), "UTF-8");
                } catch (UnsupportedEncodingException e) {
                    log.warn("User name URL encoding error. User name {}.", encodedUserName);
                }
                // Allow to register on coffeecompass.cz directly,
                // after the very first login of the user using 'social' login
                if (!user.isEnabled()) { 
                    user.setEnabled(true);
                    userService.saveUser(user);
                    return "redirect:/user/edit/?userName=" + encodedUserName + "&firstOAuth2Login=true";
                }   
            }
            return ("redirect:/home");
        }
        else {
            BadAuthorizationRequestException ex = new BadAuthorizationRequestException("Sorry! We've got an Unauthorized Redirect URI and can't proceed with the authentication");
            ex.setLocalizedMessageCode("oauth2.unauthorizedRedirectURI.error.message");
            throw ex;
        }
    }
    
    /**
     * Handles redirection URL after OAuth2 login error.<br>
     * Redirects to the next 'standard' pages, especialy login page to show authentication errors to user on login page,<br>
     * where the login process started.<br>
     * 
     * @param model
     * @param oAuth2ErrorMessageCode - message code
     * @param oAuth2ErrorMessageParameter - parameter to be inserted into the message under {@code oAuth2ErrorMessageCode}
     * @param oAuth2ErrorMessage - text of the error message. Expected when the {@code oAuth2ErrorMessageCode} is empty.
     * @param attr to pass attributes to redirected page
     * @param local - standard Locale to i18n of the error message.
     * @return view/page - to redirects to
     */
    @GetMapping("/loginError")
    public String serveOAuth2LoginError(Model model,
                                        @RequestParam(value="oAuth2ErrorMessageCode", defaultValue="") String oAuth2ErrorMessageCode,
                                        @RequestParam(value="oAuth2ErrorMessageParameter", defaultValue="") String oAuth2ErrorMessageParameter,
                                        @RequestParam(value="oAuth2ErrorMessage", defaultValue="") String oAuth2ErrorMessage,
                                        RedirectAttributes attr, Locale local) {
        
        String encodedErorrMessage = "";
        try {
            encodedErorrMessage = messages.getMessage(oAuth2ErrorMessageCode, new Object[] {oAuth2ErrorMessageParameter}, local);
        } catch(NoSuchMessageException ex) {
            if (encodedErorrMessage.isEmpty()) {
                encodedErorrMessage = oAuth2ErrorMessage;
            }
        }
       
        attr.addFlashAttribute("oAuth2ErrorMessage", encodedErorrMessage);
        return ("redirect:/login");
    }
    
}
